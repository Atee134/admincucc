/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming



export class WorkDayForAddDto implements IWorkDayForAddDto {
    date!: Date;
    shift!: Shift;

    constructor(data?: IWorkDayForAddDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.date = data["Date"] ? new Date(data["Date"].toString()) : <any>null;
            this.shift = data["Shift"] !== undefined ? data["Shift"] : <any>null;
        }
    }

    static fromJS(data: any): WorkDayForAddDto {
        data = typeof data === 'object' ? data : {};
        let result = new WorkDayForAddDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Date"] = this.date ? this.date.toISOString() : <any>null;
        data["Shift"] = this.shift !== undefined ? this.shift : <any>null;
        return data; 
    }

    clone(): WorkDayForAddDto {
        const json = this.toJSON();
        let result = new WorkDayForAddDto();
        result.init(json);
        return result;
    }
}

export interface IWorkDayForAddDto {
    date: Date;
    shift: Shift;
}

export enum Shift {
    Morning = "Morning", 
    Afternoon = "Afternoon", 
    Night = "Night", 
}

export class UserForRegisterDto implements IUserForRegisterDto {
    userName?: string | null;
    password?: string | null;
    role!: Role;

    constructor(data?: IUserForRegisterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userName = data["UserName"] !== undefined ? data["UserName"] : <any>null;
            this.password = data["Password"] !== undefined ? data["Password"] : <any>null;
            this.role = data["Role"] !== undefined ? data["Role"] : <any>null;
        }
    }

    static fromJS(data: any): UserForRegisterDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserForRegisterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["UserName"] = this.userName !== undefined ? this.userName : <any>null;
        data["Password"] = this.password !== undefined ? this.password : <any>null;
        data["Role"] = this.role !== undefined ? this.role : <any>null;
        return data; 
    }

    clone(): UserForRegisterDto {
        const json = this.toJSON();
        let result = new UserForRegisterDto();
        result.init(json);
        return result;
    }
}

export interface IUserForRegisterDto {
    userName?: string | null;
    password?: string | null;
    role: Role;
}

export enum Role {
    Operator = "Operator", 
    Performer = "Performer", 
}

export class UserForLoginDto implements IUserForLoginDto {
    userName?: string | null;
    password?: string | null;

    constructor(data?: IUserForLoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userName = data["UserName"] !== undefined ? data["UserName"] : <any>null;
            this.password = data["Password"] !== undefined ? data["Password"] : <any>null;
        }
    }

    static fromJS(data: any): UserForLoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserForLoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["UserName"] = this.userName !== undefined ? this.userName : <any>null;
        data["Password"] = this.password !== undefined ? this.password : <any>null;
        return data; 
    }

    clone(): UserForLoginDto {
        const json = this.toJSON();
        let result = new UserForLoginDto();
        result.init(json);
        return result;
    }
}

export interface IUserForLoginDto {
    userName?: string | null;
    password?: string | null;
}

export class UserForListDto implements IUserForListDto {
    id!: number;
    userName?: string | null;
    shift?: string | null;
    role?: string | null;

    constructor(data?: IUserForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
            this.userName = data["UserName"] !== undefined ? data["UserName"] : <any>null;
            this.shift = data["Shift"] !== undefined ? data["Shift"] : <any>null;
            this.role = data["Role"] !== undefined ? data["Role"] : <any>null;
        }
    }

    static fromJS(data: any): UserForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["UserName"] = this.userName !== undefined ? this.userName : <any>null;
        data["Shift"] = this.shift !== undefined ? this.shift : <any>null;
        data["Role"] = this.role !== undefined ? this.role : <any>null;
        return data; 
    }

    clone(): UserForListDto {
        const json = this.toJSON();
        let result = new UserForListDto();
        result.init(json);
        return result;
    }
}

export interface IUserForListDto {
    id: number;
    userName?: string | null;
    shift?: string | null;
    role?: string | null;
}

export class IncomeEntryForReturnDto implements IIncomeEntryForReturnDto {
    siteName?: string | null;
    incomeInDollars!: number;
    workDay!: Date;

    constructor(data?: IIncomeEntryForReturnDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.siteName = data["SiteName"] !== undefined ? data["SiteName"] : <any>null;
            this.incomeInDollars = data["IncomeInDollars"] !== undefined ? data["IncomeInDollars"] : <any>null;
            this.workDay = data["WorkDay"] ? new Date(data["WorkDay"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): IncomeEntryForReturnDto {
        data = typeof data === 'object' ? data : {};
        let result = new IncomeEntryForReturnDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SiteName"] = this.siteName !== undefined ? this.siteName : <any>null;
        data["IncomeInDollars"] = this.incomeInDollars !== undefined ? this.incomeInDollars : <any>null;
        data["WorkDay"] = this.workDay ? this.workDay.toISOString() : <any>null;
        return data; 
    }

    clone(): IncomeEntryForReturnDto {
        const json = this.toJSON();
        let result = new IncomeEntryForReturnDto();
        result.init(json);
        return result;
    }
}

export interface IIncomeEntryForReturnDto {
    siteName?: string | null;
    incomeInDollars: number;
    workDay: Date;
}